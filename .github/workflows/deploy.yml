name: Deploy Secure Azure AI Agent

on:
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'  
        required: true
        default: true
        type: boolean
      sequential:
        description: 'Deploy sequentially (recommended)'
        required: true
        default: true
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy.yml'

env:
  # ============================================
  # üîß „Éè„É≥„Ç∫„Ç™„É≥Ë®≠ÂÆö: ‰ª•‰∏ã„ÇíÂÄã‰∫∫„ÅÆÁí∞Â¢É„Å´Âêà„Çè„Åõ„Å¶Â§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
  # ============================================
  
  # Êó¢Â≠òAzure„É™„ÇΩ„Éº„Çπ„ÅÆË®≠ÂÆö (az resource list „ÅßÁ¢∫Ë™çÂèØËÉΩ)
  AZURE_WEBAPP_BACKEND_NAME: 'redteaming-demo-back-swe-mkurahara'   # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆ„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâApp ServiceÂêç
  AZURE_WEBAPP_FRONTEND_NAME: 'redteaming-demo-front-swe-mkurahara' # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆ„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâApp ServiceÂêç
  AZURE_RESOURCE_GROUP: 'redteaming-demo-rg-swe-mkurahara'          # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆResource GroupÂêç
  
  # „Åù„ÅÆ‰ªñ„ÅÆË®≠ÂÆö
  PYTHON_VERSION: '3.11'                                           # Chainlit„Å®„ÅÆ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ3.11„Çí‰ΩøÁî®

jobs:
  # Â§âÊõ¥„ÅÆÊ§úÂá∫
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      workflow-changed: ${{ steps.changes.outputs.workflow }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      id: changes
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "backend=${{ inputs.deploy_backend }}" >> $GITHUB_OUTPUT
          echo "frontend=${{ inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
          echo "workflow=false" >> $GITHUB_OUTPUT
        else
          # PushÊôÇ„ÅØÂ§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÁ¢∫Ë™ç
          if git diff --name-only HEAD~1 HEAD | grep -E '^backend/'; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E '^frontend/'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E '^\.github/workflows/deploy\.yml'; then
            echo "workflow=true" >> $GITHUB_OUTPUT
            # „ÉØ„Éº„ÇØ„Éï„É≠„ÉºËá™‰Ωì„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÅØ‰∏°Êñπ„Éá„Éó„É≠„Ç§
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "workflow=false" >> $GITHUB_OUTPUT
          fi
        fi

  # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python Backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create Backend Package
      run: |
        echo "Setting up backend deployment package..."
        
        # Ensure backend directory exists
        if [ ! -d "backend" ]; then
          echo "‚ùå Backend directory not found!"
          exit 1
        fi
        
        cd backend
        
        # Create startup.sh script
        cat > startup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting FastAPI backend application..."
        
        # Set Python path
        export PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages:$PYTHONPATH"
        
        # Set port
        export PORT=${PORT:-8000}
        
        # Change to app directory
        cd /home/site/wwwroot
        
        # Start Gunicorn with Uvicorn workers for FastAPI
        echo "Starting Gunicorn with Uvicorn workers on port $PORT..."
        exec gunicorn main:app -w 2 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:$PORT --timeout 120 --access-logfile=- --error-logfile=-
        EOF
        
        chmod +x startup.sh
        
        # Create run.sh as an alternative startup script
        cat > run.sh << 'EOF'
        #!/bin/bash
        exec /home/site/wwwroot/startup.sh
        EOF
        
        chmod +x run.sh
        
        # Create site-packages directory structure
        mkdir -p site-packages
        
        # Set environment variables for compatible package builds
        export CRYPTOGRAPHY_DONT_BUILD_RUST=1
        export PYOPENSSL_NO_VENDOR=1
        export SETUPTOOLS_USE_DISTUTILS=stdlib
        
        echo "Installing dependencies with GLIBC compatibility..."
        python -m pip install --upgrade pip setuptools wheel
        
        # Install GLIBC-compatible versions of problematic packages first
        echo "Installing GLIBC-compatible versions of cryptography packages..."
        python -m pip install \
          --target ./site-packages \
          --upgrade \
          --no-warn-script-location \
          --prefer-binary \
          "cryptography==42.0.5" \
          "pyopenssl==24.1.0" \
          "cffi==1.16.0"
        
        # Install remaining dependencies with binary preference  
        echo "Installing remaining dependencies..."
        python -m pip install \
          --target ./site-packages \
          --upgrade \
          --no-warn-script-location \
          --no-build-isolation \
          --prefer-binary \
          -r requirements.txt
        
        # Copy source code to root (not src subfolder)
        echo "Copying application files..."
        cp -r src/* ./
        
        # Create simple app.py wrapper if main.py exists
        if [ -f main.py ]; then
          echo "from main import app" > app.py
        fi
        
        # Remove unnecessary files to reduce package size
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete 2>/dev/null || true
        find . -type f -name "*.pyo" -delete 2>/dev/null || true
        
        # List package contents for verification
        echo ""
        echo "Package contents:"
        ls -la
        echo ""
        echo "Site-packages summary:"
        ls site-packages/ | head -20
        echo ""
        echo "Total package size:"
        du -sh .
        
        cd ..

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Pre-deployment cleanup and health check (Backend)
      run: |
        echo "Checking for ongoing deployments..."
        # „Éá„Éó„É≠„Ç§„É°„É≥„Éà„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™çÔºàÊúÄÊñ∞„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊÉÖÂ†±„ÇíÂèñÂæóÔºâ
        LATEST_DEPLOYMENT=$(az webapp deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group redteaming-demo-rg-swe-mkurahara \
          --query "[0].status" -o tsv 2>/dev/null || echo "None")
        
        echo "Latest deployment status: $LATEST_DEPLOYMENT"
        
        # App ServiceË®≠ÂÆö„ÇíÊúÄÈÅ©Âåñ
        echo "Configuring App Service settings for Python 3.11..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group redteaming-demo-rg-swe-mkurahara \
          --linux-fx-version "PYTHON|3.11" \
          --startup-file "run.sh"
        
        # Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆöÔºàGLIBC‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÔºâ
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group redteaming-demo-rg-swe-mkurahara \
          --settings \
            CRYPTOGRAPHY_DONT_BUILD_RUST=1 \
            PYOPENSSL_NO_VENDOR=1 \
            PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages" \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            ENABLE_ORYX_BUILD=false \
            DISABLE_ORYX_BUILD=true

    - name: Deploy Backend to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_BACKEND_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_BACKEND_PUBLISH_PROFILE }}
        package: backend/
        startup-command: 'run.sh'
        clean: true
        restart: true

    - name: Verify Backend Package Deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Check deployment status
        echo "Checking deployment status..."
        az webapp deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[0].{status:status, startTime:startTime, endTime:endTime}" -o table
        
        # Restart the app to ensure new deployment is loaded
        echo "Restarting app service..."
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        echo "Deployment completed. Waiting for app to start..."
        sleep 45

    - name: Set Backend Environment Variables
      run: |
        # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆöÔºà„Éì„É´„ÉâË®≠ÂÆö„ÅØÁÑ°Âäπ„ÅÆ„Åæ„ÅæÁ∂≠ÊåÅÔºâ
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            PORT=8000 \
            PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages" \
            PYTHONUNBUFFERED=1 \
            ENVIRONMENT=production \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            DISABLE_ORYX_BUILD=true \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            CRYPTOGRAPHY_DONT_BUILD_RUST=1 \
            PYOPENSSL_NO_VENDOR=1

    - name: Verify Backend Deployment
      run: |
        echo "Getting actual backend hostname..."
        BACKEND_HOSTNAME=$(az webapp show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query defaultHostName -o tsv)
        
        echo "Backend hostname: $BACKEND_HOSTNAME"
        HEALTH_URL="https://$BACKEND_HOSTNAME/health"
        ROOT_URL="https://$BACKEND_HOSTNAME"
        
        echo "Checking deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No deployment logs available"

        echo ""
        echo "Checking app service startup logs..."
        az webapp log download \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --log-file startup-logs.zip 2>/dev/null || echo "Unable to download startup logs"
        
        if [ -f startup-logs.zip ]; then
          unzip -q startup-logs.zip
          echo "Recent container logs:"
          find LogFiles -name "*.log" -type f -exec tail -10 {} + 2>/dev/null | tail -50 || echo "No recent logs found"
        fi

        echo ""
        echo "Checking app health with optimized retry..."
        
        # ÊúÄÂ§ß5Âõû„ÄÅÂêÑ15ÁßíÈñìÈöî„Åß„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 20 $HEALTH_URL || echo "000")
          echo "Health endpoint HTTP response code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ Backend health check passed!"
            break
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "‚ö†Ô∏è Health endpoint not found, checking root endpoint..."
            ROOT_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 20 $ROOT_URL || echo "000")
            echo "Root endpoint HTTP response code: $ROOT_CODE"
            if [[ "$ROOT_CODE" =~ ^[23] ]]; then
              echo "‚úÖ Backend root endpoint is accessible!"
              break
            fi
          else
            echo "‚ùå Backend health check failed with code: $HTTP_CODE"
            if [ $i -lt 5 ]; then
              echo "Waiting 15 seconds before retry..."
              sleep 15
            else
              echo "‚ö†Ô∏è Health check failed after 5 attempts. Checking app service status quickly..."
              az webapp show \
                --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "{state:state, lastModifiedTimeUtc:lastModifiedTimeUtc}" -o table
            fi
          fi
        done

    - name: Backend Status Summary
      if: always()
      run: |
        echo "=== Backend Deployment Summary ==="
        az webapp show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "{name:name, status:state, url:defaultHostName, location:location}" -o table
        
        echo ""
        echo "Backend URL: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
        echo "Health Check URL: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/health"

  # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§ÔºàÈÄêÊ¨°ÂÆüË°å„ÅÆÂ†¥ÂêàÔºâ
  deploy-frontend-sequential:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend]
    if: |
      always() && 
      needs.detect-changes.outputs.frontend-changed == 'true' && 
      (github.event_name != 'workflow_dispatch' || inputs.sequential == true) &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install frontend dependencies (optimized)
      run: |
        cd frontend
        python -m pip install --upgrade pip
        # ÊúÄÈÅ©Âåñ„Åï„Çå„Åürequirements„Çí‰ΩøÁî®
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          pip install -r requirements-optimized.txt --no-cache-dir
        else
          echo "Using standard requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi

    - name: Package frontend (zip)
      run: |
        echo "Creating frontend deployment package..."
        
        # Ensure frontend directory exists
        if [ ! -d "frontend" ]; then
          echo "‚ùå Frontend directory not found!"
          exit 1
        fi
        
        cd frontend
        
        # Create startup.sh script for frontend
        cat > startup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting Chainlit frontend application..."
        
        # Set Python path
        export PYTHONPATH="/home/site/wwwroot/frontend:/home/site/wwwroot/frontend/site-packages:$PYTHONPATH"
        
        # Set port
        export PORT=${PORT:-8000}
        
        # Change to frontend directory
        cd /home/site/wwwroot/frontend
        
        # Install chainlit if not present (fallback)
        if ! command -v chainlit &> /dev/null; then
          echo "Chainlit not found in PATH, using Python module..."
          python -m chainlit run app.py --host 0.0.0.0 --port $PORT
        else
          echo "Starting Chainlit on port $PORT..."
          chainlit run app.py --host 0.0.0.0 --port $PORT
        fi
        EOF
        
        chmod +x startup.sh
        
        # Create site-packages directory structure
        mkdir -p site-packages
        
        # Set environment variables for compatible package builds
        export CRYPTOGRAPHY_DONT_BUILD_RUST=1
        export PYOPENSSL_NO_VENDOR=1
        export SETUPTOOLS_USE_DISTUTILS=stdlib
        
        echo "Installing frontend dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        
        # Install GLIBC-compatible cryptography packages first (Sequential)
        echo "Installing GLIBC-compatible versions of cryptography packages..."
        python -m pip install \
          --target ./site-packages \
          --upgrade \
          --no-warn-script-location \
          --prefer-binary \
          "cryptography==42.0.5" \
          "pyopenssl==24.1.0" \
          "cffi==1.16.0"

        # Install dependencies to site-packages
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          python -m pip install \
            --target ./site-packages \
            --upgrade \
            --no-warn-script-location \
            --no-build-isolation \
            --prefer-binary \
            -r requirements-optimized.txt
        else
          echo "Using standard requirements..."
          python -m pip install \
            --target ./site-packages \
            --upgrade \
            --no-warn-script-location \
            --no-build-isolation \
            --prefer-binary \
            -r requirements.txt
        fi
        
        # Ensure chainlit executable is available
        if [ -f site-packages/bin/chainlit ]; then
          echo "Creating chainlit wrapper..."
          cat > chainlit << 'EOF'
        #!/bin/bash
        exec python -m chainlit "$@"
        EOF
          chmod +x chainlit
        fi
        
        # List package contents for verification
        echo ""
        echo "Package contents:"
        ls -la
        echo ""
        echo "Checking for chainlit installation:"
        find site-packages -name "chainlit*" -type d | head -5
        
        cd ..
        
        # Create the deployment package
        zip -r frontend-package.zip frontend/ \
          -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "*.pyd" \
          ".env" "*.pytest_cache*" "*.DS_Store"
        
        ls -lh frontend-package.zip

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(az webapp show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query defaultHostName -o tsv)
        echo "BACKEND_URL=https://$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: https://$BACKEND_URL"

    - name: Pre-deployment cleanup (Frontend)
      run: |
        echo "Preparing frontend deployment..."
        
        # App ServiceË®≠ÂÆö„ÇíÊúÄÈÅ©Âåñ
        echo "Configuring App Service settings for Python 3.11..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11" \
          --startup-file "/home/site/wwwroot/frontend/startup.sh" \
          --web-sockets-enabled true
        
        # Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            CRYPTOGRAPHY_DONT_BUILD_RUST=1 \
            PYOPENSSL_NO_VENDOR=1 \
            PYTHONPATH="/home/site/wwwroot/frontend:/home/site/wwwroot/frontend/site-packages" \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            ENABLE_ORYX_BUILD=false
        
        # WEBSITE_RUN_FROM_PACKAGE„ÇíÂâäÈô§„Åó„Å¶Êñ∞„Åó„ÅÑ„Éá„Éó„É≠„Ç§„ÇíË®±ÂèØ
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        # App Service„Çí‰∏ÄÂ∫¶ÂÅúÊ≠¢„Åó„Å¶Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        echo "Stopping frontend app service..."
        az webapp stop \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 10
        
        # App Service„ÇíËµ∑Âãï
        echo "Starting frontend app service..."
        az webapp start \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 15

    - name: Deploy Frontend (with extended timeout)
      run: |
        set -euo pipefail
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâApp ServiceË®≠ÂÆö„ÇíÊúÄÈÅ©Âåñ
        echo "Configuring Frontend App Service for Python 3.11..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --startup-file '/home/site/wwwroot/frontend/startup.sh' \
          --linux-fx-version "PYTHON|3.11" \
          --web-sockets-enabled true
        
        # Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆöÔºàGLIBC‰∫íÊèõÊÄßÂê´„ÇÄÔºâ
        echo "Setting environment variables..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            BACKEND_API_URL="${{ steps.backend-url.outputs.BACKEND_URL }}" \
            PORT=8000 \
            PYTHONPATH="/home/site/wwwroot/frontend:/home/site/wwwroot/frontend/site-packages" \
            PYTHONUNBUFFERED=1 \
            CRYPTOGRAPHY_DONT_BUILD_RUST=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            ENABLE_ORYX_BUILD=false \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§ÂÆüË°åÔºàÂ§ßÂπÖ„Å´„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíÂª∂Èï∑Ôºâ
        echo "Deploying frontend package..."
        az webapp deploy \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --src-path "frontend-package.zip" \
          --type zip \
          --restart true \
          --timeout 1200 || {
            echo "‚ö†Ô∏è Frontend deployment command timed out, but deployment may still be in progress..."
            echo "Checking deployment status in 30 seconds..."
            sleep 30
            
            # „Éá„Éó„É≠„Ç§„É°„É≥„Éà„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç
            DEPLOYMENT_STATUS=""
            for i in {1..15}; do
              echo "Checking frontend deployment status (attempt $i)..."
              DEPLOYMENT_STATUS=$(az webapp log deployment list \
                --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "[0].status" -o tsv 2>/dev/null || echo "Unknown")
              
              echo "Frontend deployment status: $DEPLOYMENT_STATUS"
              
              if [[ "$DEPLOYMENT_STATUS" == "Success" ]]; then
                echo "‚úÖ Frontend deployment completed successfully!"
                break
              elif [[ "$DEPLOYMENT_STATUS" == "Failed" ]]; then
                echo "‚ùå Frontend deployment failed!"
                echo "Trying alternative deployment method..."
                
                # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Azure Web Apps Deploy „Ç¢„ÇØ„Ç∑„Éß„É≥„Çí‰ΩøÁî®
                echo "Attempting deployment with alternative method..."
                az webapp deploy \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
                  --src-path "frontend-package.zip" \
                  --type zip \
                  --restart true \
                  --clean true \
                  --timeout 600 || echo "Alternative deployment also timed out"
                break
              else
                echo "Frontend deployment still in progress, waiting..."
                sleep 40
              fi
            done
          }
        
        echo "Frontend deployment phase completed. Waiting for app to start..."
        sleep 90

    - name: Verify Frontend Deployment
      run: |
        echo "Getting actual frontend hostname..."
        FRONTEND_HOSTNAME=$(az webapp show \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query defaultHostName -o tsv)
        
        echo "Frontend hostname: $FRONTEND_HOSTNAME"
        HEALTH_URL="https://$FRONTEND_HOSTNAME/health"
        ROOT_URL="https://$FRONTEND_HOSTNAME"
        
        echo "Checking deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No deployment logs available"

        echo ""
        echo "Checking frontend health with optimized retry..."
        
        # ÊúÄÂ§ß5Âõû„ÄÅÂêÑ10ÁßíÈñìÈöî„Åß„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 20 $HEALTH_URL || echo "000")
          echo "Health endpoint HTTP response code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ Frontend health check passed!"
            break
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "‚ö†Ô∏è Health endpoint not found, checking root endpoint..."
            ROOT_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 20 $ROOT_URL || echo "000")
            echo "Root endpoint HTTP response code: $ROOT_CODE"
            if [[ "$ROOT_CODE" =~ ^[23] ]]; then
              echo "‚úÖ Frontend root endpoint is accessible!"
              break
            fi
          else
            echo "‚ùå Frontend health check failed with code: $HTTP_CODE"
            if [ $i -lt 5 ]; then
              echo "Waiting 10 seconds before retry..."
              sleep 10
            else
              echo "‚ö†Ô∏è Health check failed after 5 attempts. Checking app service status quickly..."
              az webapp show \
                --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "{state:state, lastModifiedTimeUtc:lastModifiedTimeUtc}" -o table
            fi
          fi
        done

    - name: Frontend Status Summary
      if: always()
      run: |
        echo "=== Frontend Deployment Summary ==="
        az webapp show \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "{name:name, status:state, url:defaultHostName, location:location}" -o table
        
        echo ""
        echo "Frontend URL: https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net"
        echo "Backend API URL: ${{ steps.backend-url.outputs.BACKEND_URL }}"

  # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§Ôºà‰∏¶ÂàóÂÆüË°å„ÅÆÂ†¥ÂêàÔºâ
  deploy-frontend-parallel:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: |
      needs.detect-changes.outputs.frontend-changed == 'true' && 
      github.event_name == 'workflow_dispatch' && 
      inputs.sequential == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install frontend dependencies (optimized)
      run: |
        cd frontend
        python -m pip install --upgrade pip
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          pip install -r requirements-optimized.txt --no-cache-dir
        else
          echo "Using standard requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi

    - name: Package frontend (zip)
      run: |
        echo "Creating frontend deployment package..."
        
        # Ensure frontend directory exists
        if [ ! -d "frontend" ]; then
          echo "‚ùå Frontend directory not found!"
          exit 1
        fi
        
        cd frontend
        
        # Create startup.sh script for frontend
        cat > startup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting Chainlit frontend application..."
        
        # Set Python path
        export PYTHONPATH="/home/site/wwwroot/frontend:/home/site/wwwroot/frontend/site-packages:$PYTHONPATH"
        
        # Set port
        export PORT=${PORT:-8000}
        
        # Change to frontend directory
        cd /home/site/wwwroot/frontend
        
        # Install chainlit if not present (fallback)
        if ! command -v chainlit &> /dev/null; then
          echo "Chainlit not found in PATH, using Python module..."
          python -m chainlit run app.py --host 0.0.0.0 --port $PORT
        else
          echo "Starting Chainlit on port $PORT..."
          chainlit run app.py --host 0.0.0.0 --port $PORT
        fi
        EOF
        
        chmod +x startup.sh
        
        # Install GLIBC-compatible cryptography packages first (Parallel)
        echo "Installing GLIBC-compatible versions of cryptography packages..."
        python -m pip install \
          --target ./site-packages \
          --upgrade \
          --no-warn-script-location \
          --prefer-binary \
          "cryptography==42.0.5" \
          "pyopenssl==24.1.0" \
          "cffi==1.16.0"

        # Create site-packages directory structure
        mkdir -p site-packages
        
        # Set environment variables for compatible package builds
        export CRYPTOGRAPHY_DONT_BUILD_RUST=1
        export PYOPENSSL_NO_VENDOR=1
        export SETUPTOOLS_USE_DISTUTILS=stdlib
        
        echo "Installing frontend dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        
        # Install dependencies to site-packages
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          python -m pip install \
            --target ./site-packages \
            --upgrade \
            --no-warn-script-location \
            --no-build-isolation \
            --prefer-binary \
            -r requirements-optimized.txt
        else
          echo "Using standard requirements..."
          python -m pip install \
            --target ./site-packages \
            --upgrade \
            --no-warn-script-location \
            --no-build-isolation \
            --prefer-binary \
            -r requirements.txt
        fi
        
        # Ensure chainlit executable is available
        if [ -f site-packages/bin/chainlit ]; then
          echo "Creating chainlit wrapper..."
          cat > chainlit << 'EOF'
        #!/bin/bash
        exec python -m chainlit "$@"
        EOF
          chmod +x chainlit
        fi
        
        # List package contents for verification
        echo ""
        echo "Package contents:"
        ls -la
        echo ""
        echo "Checking for chainlit installation:"
        find site-packages -name "chainlit*" -type d | head -5
        
        cd ..
        
        # Create the deployment package
        zip -r frontend-package.zip frontend/ \
          -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "*.pyd" \
          ".env" "*.pytest_cache*" "*.DS_Store"
        
        ls -lh frontend-package.zip

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(az webapp show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query defaultHostName -o tsv)
        echo "BACKEND_URL=https://$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: https://$BACKEND_URL"

    - name: Pre-deployment cleanup (Frontend)
      run: |
        echo "Preparing frontend deployment..."
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        echo "Stopping frontend app service..."
        az webapp stop \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 10
        
        echo "Starting frontend app service..."
        az webapp start \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 15

    - name: Deploy Frontend (with extended timeout)
      run: |
        set -euo pipefail
        
        echo "Setting environment variables..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            BACKEND_API_URL="${{ steps.backend-url.outputs.BACKEND_URL }}" \
            PORT=8000 \
            PYTHONPATH="/home/site/wwwroot/frontend:/home/site/wwwroot/frontend/site-packages" \
            PYTHONUNBUFFERED=1 \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        
        echo "Setting startup command..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --startup-file '/home/site/wwwroot/frontend/startup.sh' \
          --linux-fx-version "PYTHON|3.11" \
          --web-sockets-enabled true
        
        echo "Deploying frontend package..."
        az webapp deploy \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --src-path "frontend-package.zip" \
          --type zip \
          --restart true \
          --timeout 1200 || {
            echo "‚ö†Ô∏è Frontend deployment command timed out, but deployment may still be in progress..."
            echo "Checking deployment status..."
            sleep 30
            
            DEPLOYMENT_STATUS=""
            for i in {1..15}; do
              echo "Checking frontend deployment status (attempt $i)..."
              DEPLOYMENT_STATUS=$(az webapp log deployment list \
                --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "[0].status" -o tsv 2>/dev/null || echo "Unknown")
              
              echo "Frontend deployment status: $DEPLOYMENT_STATUS"
              
              if [[ "$DEPLOYMENT_STATUS" == "Success" ]]; then
                echo "‚úÖ Frontend deployment completed successfully!"
                break
              elif [[ "$DEPLOYMENT_STATUS" == "Failed" ]]; then
                echo "‚ùå Frontend deployment failed!"
                break
              else
                echo "Frontend deployment still in progress, waiting..."
                sleep 40
              fi
            done
          }
        
        echo "Frontend deployment phase completed. Waiting for app to start..."
        sleep 90

    - name: Verify Frontend Deployment
      run: |
        echo "Checking frontend deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No frontend deployment logs available"

        echo "Checking frontend app health with optimized retry..."
        FRONTEND_URL="https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net"
        
        for i in {1..5}; do
          echo "Frontend health check attempt $i/5..."
          HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 30 $FRONTEND_URL || echo "000")
          echo "HTTP response code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ Frontend health check passed!"
            break
          elif [[ "$HTTP_CODE" =~ ^[23] ]]; then
            echo "‚úÖ Frontend is responding (HTTP $HTTP_CODE)!"
            break
          else
            echo "‚ùå Frontend health check failed with code: $HTTP_CODE"
            if [ $i -lt 5 ]; then
              echo "Waiting 20 seconds before retry..."
              sleep 20
            fi
          fi
        done

        echo "Showing recent frontend logs (last 50 lines)..."
        az webapp log tail \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --lines 50 2>/dev/null || echo "Unable to fetch frontend application logs"

  # „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÁµêÊûú„ÅÆ„Çµ„Éû„É™„Éº
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend, deploy-frontend-sequential, deploy-frontend-parallel]
    if: always()
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deployment Summary
      run: |
        echo "=== Full Deployment Summary ==="
        echo ""
        
        BACKEND_DEPLOYED="${{ needs.detect-changes.outputs.backend-changed }}"
        FRONTEND_DEPLOYED="${{ needs.detect-changes.outputs.frontend-changed }}"
        
        echo "Components targeted for deployment:"
        echo "- Backend: $BACKEND_DEPLOYED"
        echo "- Frontend: $FRONTEND_DEPLOYED"
        echo ""
        
        if [ "$BACKEND_DEPLOYED" == "true" ]; then
          echo "Backend Status:"
          az webapp show \
            --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "{name:name, status:state, url:defaultHostName}" -o table 2>/dev/null || echo "Unable to get backend status"
          echo "Backend URL: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
          echo "Health Check: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/health"
          echo ""
        fi
        
        if [ "$FRONTEND_DEPLOYED" == "true" ]; then
          echo "Frontend Status:"
          az webapp show \
            --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "{name:name, status:state, url:defaultHostName}" -o table 2>/dev/null || echo "Unable to get frontend status"
          echo "Frontend URL: https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net"
          echo ""
        fi
        
        echo "=== Job Results ==="
        echo "Backend deployment: ${{ needs.deploy-backend.result }}"
        echo "Frontend deployment (sequential): ${{ needs.deploy-frontend-sequential.result }}"
        echo "Frontend deployment (parallel): ${{ needs.deploy-frontend-parallel.result }}"
        echo ""
        
        # Determine frontend result (either sequential or parallel job)
        FRONTEND_RESULT="${{ needs.deploy-frontend-sequential.result }}"
        if [ "$FRONTEND_RESULT" == "skipped" ] || [ -z "$FRONTEND_RESULT" ]; then
          FRONTEND_RESULT="${{ needs.deploy-frontend-parallel.result }}"
        fi
        
        BACKEND_RESULT="${{ needs.deploy-backend.result }}"
        
        # Final status
        if [[ ("$BACKEND_DEPLOYED" == "false" || "$BACKEND_RESULT" == "success" || "$BACKEND_RESULT" == "skipped") && 
              ("$FRONTEND_DEPLOYED" == "false" || "$FRONTEND_RESULT" == "success" || "$FRONTEND_RESULT" == "skipped") ]]; then
          echo "üéâ All targeted deployments completed successfully!"
          echo ""
          if [ "$FRONTEND_DEPLOYED" == "true" ]; then
            echo "Application is ready:"
            echo "üëâ Frontend: https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net"
          fi
          if [ "$BACKEND_DEPLOYED" == "true" ]; then
            echo "üîß Backend API: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
          fi
        elif [[ ("$BACKEND_DEPLOYED" == "false" || "$BACKEND_RESULT" == "success" || "$BACKEND_RESULT" == "skipped") || 
                ("$FRONTEND_DEPLOYED" == "false" || "$FRONTEND_RESULT" == "success" || "$FRONTEND_RESULT" == "skipped") ]]; then
          echo "‚ö†Ô∏è Partial deployment completed"
          echo "Check individual job logs for details"
        else
          echo "‚ùå Deployment failed"
          echo "Check individual job logs for troubleshooting"
        fi