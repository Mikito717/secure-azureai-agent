name: Deploy Backend to Azure

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  # ============================================
  # 🔧 ハンズオン設定: 以下を個人の環境に合わせて変更してください
  # ============================================
  
  # 既存Azureリソースの設定 (az resource list で確認可能)
  AZURE_WEBAPP_BACKEND_NAME: 'redteaming-demo-back-swe-mkurahara'   # 🔧 変更必要: あなたのバックエンドApp Service名
  AZURE_RESOURCE_GROUP: 'redteaming-demo-rg-swe-mkurahara'          # 🔧 変更必要: あなたのResource Group名
  
  # その他の設定
  PYTHON_VERSION: '3.11'                                           # Chainlitとの互換性のため3.11を使用

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies (optimized)
      run: |
        cd backend
        python -m pip install --upgrade pip
        # 最適化されたrequirementsを使用
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          pip install -r requirements-optimized.txt --no-cache-dir
        else
          echo "Using standard requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi

    - name: Run backend tests
      run: |
        cd backend
        # Add test commands here when tests are available
        # python -m pytest tests/

    - name: Package backend (zip - prebuilt)
      run: |
        echo "Creating prebuilt backend package..."
        rm -rf deploy-package backend-package.zip
        mkdir -p deploy-package
        
        # Copy source code
        echo "Copying source files..."
        cp -r backend/src deploy-package/
        
        # Pre-install dependencies to site-packages directory
        echo "Pre-installing dependencies..."
        pip install -r backend/requirements.txt \
          --target deploy-package/site-packages \
          --no-cache-dir

        # Create optimized startup script (no installation needed)
        echo '#!/bin/bash' > deploy-package/startup.sh
        echo 'cd /home/site/wwwroot' >> deploy-package/startup.sh
        echo 'export PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages"' >> deploy-package/startup.sh
        echo 'echo "Starting application directly (no install needed)..."' >> deploy-package/startup.sh
        echo 'python -m gunicorn --bind 0.0.0.0:${PORT:-8000} src.main:app -k uvicorn.workers.UvicornWorker --timeout 120 --workers 1' >> deploy-package/startup.sh
        chmod +x deploy-package/startup.sh
        
        # Create ZIP package
        cd deploy-package
        zip -r ../backend-package.zip .
        cd ..
        rm -rf deploy-package
        
        echo "Package created successfully:"
        ls -lh backend-package.zip
        echo "Package contents:"
        unzip -l backend-package.zip | head -20

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Pre-deployment cleanup and health check
      run: |
        echo "Checking for ongoing deployments..."
        # デプロイメントステータスを確認（最新のデプロイメント情報を取得）
        LATEST_DEPLOYMENT=$(az webapp log deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[0].{status:status, id:id}" -o json 2>/dev/null || echo "{}")
        
        if [ ! -z "$LATEST_DEPLOYMENT" ] && [ "$LATEST_DEPLOYMENT" != "{}" ]; then
          STATUS=$(echo $LATEST_DEPLOYMENT | jq -r '.status // "Unknown"' 2>/dev/null || echo "Unknown")
          echo "Latest deployment status: $STATUS"
          
          if [[ "$STATUS" == "Building" || "$STATUS" == "InProgress" || "$STATUS" == "Deploying" ]]; then
            echo "Found ongoing deployment, waiting..."
            sleep 60
          fi
        else
          echo "No deployment history found or unable to check status"
        fi
        
        echo "Removing WEBSITE_RUN_FROM_PACKAGE setting to allow deployment..."
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        echo "Stopping the app service to ensure clean state..."
        az webapp stop \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 10

    - name: Backend Deploy (no-build mode with extended timeout)
      run: |
        set -euo pipefail
        
        # App Service の起動
        echo "Starting App Service..."
        az webapp start \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 15
        
        # ビルドを完全に無効化（事前ビルド済みパッケージ使用）
        echo "Configuring for prebuilt package deployment (no build needed)..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            ENABLE_ORYX_BUILD=false \
            PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages" \
            PORT=8000
            
        # スタートアップコマンド設定
        echo "Setting startup command..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --startup-file 'startup.sh'
        
        # 高速デプロイ実行（ビルド不要、タイムアウト大幅延長）
        echo "Deploying prebuilt package..."
        az webapp deploy \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --src-path "backend-package.zip" \
          --type zip \
          --restart true \
          --timeout 900 || {
            echo "⚠️ Deployment command timed out, but deployment may still be in progress..."
            echo "Checking deployment status in 30 seconds..."
            sleep 30
            
            # デプロイメントステータスを確認
            DEPLOYMENT_STATUS=""
            for i in {1..10}; do
              echo "Checking deployment status (attempt $i)..."
              DEPLOYMENT_STATUS=$(az webapp log deployment list \
                --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "[0].status" -o tsv 2>/dev/null || echo "Unknown")
              
              echo "Deployment status: $DEPLOYMENT_STATUS"
              
              if [[ "$DEPLOYMENT_STATUS" == "Success" ]]; then
                echo "✅ Deployment completed successfully!"
                break
              elif [[ "$DEPLOYMENT_STATUS" == "Failed" ]]; then
                echo "❌ Deployment failed!"
                exit 1
              else
                echo "Deployment still in progress, waiting..."
                sleep 30
              fi
            done
          }
        
        echo "Deployment phase completed. Waiting for app to start..."
        sleep 60

    - name: Verify Backend Deployment
      run: |
        echo "Checking deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No deployment logs available"

        echo "Checking app health with extended retry..."
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/health"
        
        # 最大10回、各30秒間隔でヘルスチェック
        for i in {1..10}; do
          echo "Health check attempt $i/10..."
          HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" --max-time 30 $HEALTH_URL || echo "000")
          echo "HTTP response code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "✅ Backend health check passed!"
            break
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "⚠️ Backend is running but health endpoint not found"
            break
          else
            echo "❌ Backend health check failed with code: $HTTP_CODE"
            if [ $i -lt 10 ]; then
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          fi
        done

        echo "Showing recent logs (last 100 lines)..."
        az webapp log tail \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --lines 100 2>/dev/null || echo "Unable to fetch application logs"

    - name: Set Backend Environment Variables
      run: |
        # 環境変数設定（ビルド設定は無効のまま維持）
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            PORT=8000 \
            PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/site-packages" \
            PYTHONUNBUFFERED=1 \
            ENVIRONMENT=production \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITE_HTTPLOGGING_RETENTION_DAYS=1 \
            WEBSITE_TIME_ZONE="UTC"
        
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11"

    - name: Backend Status Summary
      if: always()
      run: |
        echo "=== Backend Deployment Summary ==="
        az webapp show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "{name:name, status:state, url:defaultHostName, location:location}" -o table
        
        echo ""
        echo "Backend URL: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
        echo "Health Check URL: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/health"