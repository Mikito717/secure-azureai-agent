name: Azure App Service - Deploy to Production

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # ============================================
  # üîß „Éè„É≥„Ç∫„Ç™„É≥Ë®≠ÂÆö: ‰ª•‰∏ã„ÇíÂÄã‰∫∫„ÅÆÁí∞Â¢É„Å´Âêà„Çè„Åõ„Å¶Â§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
  # ============================================
  
  # Êó¢Â≠òAzure„É™„ÇΩ„Éº„Çπ„ÅÆË®≠ÂÆö (az resource list „ÅßÁ¢∫Ë™çÂèØËÉΩ)
  AZURE_WEBAPP_BACKEND_NAME: 'redteaming-demo-back-swe-mkurahara'   # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆ„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâApp ServiceÂêç
  AZURE_WEBAPP_FRONTEND_NAME: 'redteaming-demo-front-swe-mkurahara' # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆ„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâApp ServiceÂêç
  AZURE_RESOURCE_GROUP: 'redteaming-demo-rg-swe-mkurahara'          # üîß Â§âÊõ¥ÂøÖË¶Å: „ÅÇ„Å™„Åü„ÅÆResource GroupÂêç
  
  # „Åù„ÅÆ‰ªñ„ÅÆË®≠ÂÆö
  PYTHON_VERSION: '3.11'                                           # Chainlit„Å®„ÅÆ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ3.11„Çí‰ΩøÁî®

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies (optimized)
      run: |
        cd backend
        python -m pip install --upgrade pip
        # ÊúÄÈÅ©Âåñ„Åï„Çå„Åürequirements„Çí‰ΩøÁî®
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          pip install -r requirements-optimized.txt --no-cache-dir
        else
          echo "Using standard requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi

    - name: Install frontend dependencies (optimized)
      run: |
        cd frontend
        python -m pip install --upgrade pip
        # ÊúÄÈÅ©Âåñ„Åï„Çå„Åürequirements„Çí‰ΩøÁî®
        if [ -f requirements-optimized.txt ]; then
          echo "Using optimized requirements..."
          pip install -r requirements-optimized.txt --no-cache-dir
        else
          echo "Using standard requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi

    - name: Run backend tests
      run: |
        cd backend
        # Add test commands here when tests are available
        # python -m pytest tests/

    - name: Package backend (zip)
      run: |
        echo "Creating backend package..."
        rm -rf deploy-package backend-package.zip
        mkdir -p deploy-package
        
        # Copy necessary files
        cp -r backend/src deploy-package/
        cp backend/requirements.txt deploy-package/
        
        # Create startup script
        cat > deploy-package/startup.sh << 'EOF'
        #!/bin/bash
        cd /home/site/wwwroot
        echo "Installing dependencies..."
        pip install -r requirements.txt --no-cache-dir
        echo "Starting application..."
        gunicorn --bind 0.0.0.0:${PORT:-8000} src.main:app -k uvicorn.workers.UvicornWorker --timeout 120
        EOF
        chmod +x deploy-package/startup.sh
        
        # Create ZIP
        cd deploy-package && zip -r ../backend-package.zip . && cd ..
        rm -rf deploy-package
        ls -lh backend-package.zip

    - name: Package frontend (zip)
      run: |
        # App Service„ÅÆ„Éì„É´„Éâ„Ç∑„Çπ„ÉÜ„É†„ÅåÊúüÂæÖ„Åô„ÇãÊßãÈÄ†„Åß„Éë„ÉÉ„Ç±„Éº„Ç∏„É≥„Ç∞
        mkdir -p deploy-package/frontend
        cp -r frontend/* deploy-package/frontend/
        # ÊúÄÈÅ©Âåñ„Åï„Çå„Åürequirements„Çí‰ΩøÁî®
        if [ -f frontend/requirements-optimized.txt ]; then
          echo "Using optimized requirements for frontend deployment..."
          cp frontend/requirements-optimized.txt deploy-package/requirements.txt
        else
          echo "Using standard requirements for frontend deployment..."
          cp frontend/requirements.txt deploy-package/
        fi
        cd deploy-package
        zip -r ../frontend-package.zip . \
          -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "*.pyd" \
          ".env" "*.pytest_cache*" "*.DS_Store"
        cd ..
        rm -rf deploy-package
        ls -lh frontend-package.zip

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-app
        path: backend-package.zip

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-app
        path: frontend-package.zip

  # „Ç§„É≥„Éï„É©„Çπ„Éà„É©„ÇØ„ÉÅ„É£„ÅÆ„Éá„Éó„É≠„Ç§„ÅØÊó¢Â≠ò„É™„ÇΩ„Éº„Çπ„Çí‰ΩøÁî®„Åô„Çã„Åü„ÇÅ„Çπ„Ç≠„ÉÉ„Éó
  # deploy-infrastructure:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-test
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #
  #   - name: Setup Azure CLI
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: latest
  #
  #   - name: Install Azure Developer CLI
  #     run: |
  #       curl -fsSL https://aka.ms/install-azd.sh | bash
  #
  #   - name: Deploy infrastructure with azd
  #     run: |
  #       azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}
  #       azd env new production --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location "East US"
  #       azd provision --no-prompt
  #     env:
  #       AZURE_ENV_NAME: production
  #       AZURE_LOCATION: eastus
  #       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-app
        path: ./

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Pre-deployment cleanup and health check
      run: |
        echo "Checking for ongoing deployments..."
        # „Éá„Éó„É≠„Ç§„É°„É≥„Éà„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™çÔºàÊúÄÊñ∞„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊÉÖÂ†±„ÇíÂèñÂæóÔºâ
        LATEST_DEPLOYMENT=$(az webapp log deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[0].{status:status, id:id}" -o json 2>/dev/null || echo "{}")
        
        if [ ! -z "$LATEST_DEPLOYMENT" ] && [ "$LATEST_DEPLOYMENT" != "{}" ]; then
          STATUS=$(echo $LATEST_DEPLOYMENT | jq -r '.status // "Unknown"' 2>/dev/null || echo "Unknown")
          echo "Latest deployment status: $STATUS"
          
          if [[ "$STATUS" == "Building" || "$STATUS" == "InProgress" || "$STATUS" == "Deploying" ]]; then
            echo "Found ongoing deployment, waiting..."
            sleep 60
          fi
        else
          echo "No deployment history found or unable to check status"
        fi
        
        echo "Removing WEBSITE_RUN_FROM_PACKAGE setting to allow deployment..."
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        echo "Stopping the app service to ensure clean state..."
        az webapp stop \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 10

    - name: Backend Deploy (improved)
      run: |
        set -euo pipefail
        
        # App Service „ÅÆËµ∑Âãï
        echo "Starting App Service..."
        az webapp start \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 15
        
        # Ë®≠ÂÆö„ÅÆÊúÄÈÅ©Âåñ
        echo "Configuring App Service settings..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true \
            PYTHONPATH=/home/site/wwwroot \
            PORT=8000
            
        # „Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó„Ç≥„Éû„É≥„ÉâË®≠ÂÆö
        echo "Setting startup command..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --startup-file 'startup.sh'
        
        # „Éá„Éó„É≠„Ç§ÂÆüË°åÔºà„É™„Éà„É©„Ç§‰ªò„ÅçÔºâ
        echo "Deploying backend package..."
        ZIP=backend-package.zip
        MAX=3
        DELAY=30
        SUCCESS=0
        
        for i in $(seq 1 $MAX); do
          echo "Deploy attempt $i/$MAX"
          
          # Ââç„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÅåÂÆå‰∫Ü„Åô„Çã„Åæ„ÅßÂæÖÊ©ü
          if [ $i -gt 1 ]; then
            echo "Checking deployment status before retry..."
            DEPLOY_STATUS=$(az webapp show \
              --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "state" -o tsv)
            echo "App state: $DEPLOY_STATUS"
            sleep $DELAY
            DELAY=$((DELAY+30))
          fi
          
          # „Éá„Éó„É≠„Ç§ÂÆüË°å
          if az webapp deploy \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
            --src-path "$ZIP" \
            --type zip \
            --restart true \
            --clean true \
            --timeout 600; then
              echo "Deploy succeeded"
              SUCCESS=1
              break
          fi
          
          echo "Deploy failed. Will retry after $DELAY seconds..."
        done
        
        if [ "$SUCCESS" != "1" ]; then
          echo "All deploy attempts failed" >&2
          exit 1
        fi

        echo "Syncing and waiting for app to initialize..."
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

        echo "Waiting for app startup (30s)..."
        sleep 30

        echo "Show recent deployment status"
        az webapp log deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query '[0]' 2>/dev/null || echo "No deployment history available"

    - name: Verify Backend Deployment
      run: |
        echo "Checking deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No deployment logs available"

        echo "Checking app health..."
        sleep 10
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
        HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
        echo "HTTP response code: $HTTP_CODE"
        if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "404" ]; then
          echo "Health check failed with code: $HTTP_CODE"
        else
          echo "App is responding (HTTP $HTTP_CODE)"
        fi

        echo "Showing recent logs (last 50 lines)..."
        az webapp log tail \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --lines 50 2>/dev/null || echo "Unable to fetch application logs"

    - name: Set Backend Environment Variables
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            PORT=8000 \
            PYTHONPATH=/home/site/wwwroot \
            PYTHONUNBUFFERED=1 \
            ENVIRONMENT=production \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true \
            ENABLE_ORYX_BUILD=true \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITE_HTTPLOGGING_RETENTION_DAYS=1 \
            WEBSITE_TIME_ZONE="UTC"
        
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-backend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-app
        path: ./

    - name: Unzip frontend artifact
      run: |
        rm -rf frontend || true
        unzip -q frontend-package.zip -d frontend
        ls -R1 frontend | head -50

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(az webapp show --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query defaultHostName -o tsv)
        echo "BACKEND_URL=https://$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy to Azure App Service (Frontend)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_FRONTEND_NAME }}
        package: frontend-package.zip
        clean: true
        startup-command: 'cd frontend && chainlit run app.py --host 0.0.0.0 --port ${PORT:-8000}'

    - name: Retry on Conflict (Frontend)
      if: failure()
      run: |
        echo "Primary deployment failed, trying alternative approach..."
        
        # WEBSITE_RUN_FROM_PACKAGE„ÇíÂâäÈô§
        az webapp config appsettings delete \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        # az webapp deploy„Çí‰ΩøÁî®
        az webapp deploy \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --src-path "frontend-package.zip" \
          --type zip \
          --restart true \
          --clean true \
          --timeout 600

    - name: Set Frontend Environment Variables
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            BACKEND_API_URL="${{ steps.backend-url.outputs.BACKEND_URL }}" \
            PORT=8000 \
            PYTHONPATH=/home/site/wwwroot/frontend \
            PYTHONUNBUFFERED=1 \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true \
            ENABLE_ORYX_BUILD=true \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11" \
          --web-sockets-enabled true
