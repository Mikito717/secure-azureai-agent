name: Azure App Service - Deploy to Production

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # ============================================
  # 🔧 ハンズオン設定: 以下を個人の環境に合わせて変更してください
  # ============================================
  
  # 既存Azureリソースの設定 (az resource list で確認可能)
  AZURE_WEBAPP_BACKEND_NAME: 'redteaming-demo-back-swe-mkurahara'   # 🔧 変更必要: あなたのバックエンドApp Service名
  AZURE_WEBAPP_FRONTEND_NAME: 'redteaming-demo-front-swe-mkurahara' # 🔧 変更必要: あなたのフロントエンドApp Service名
  AZURE_RESOURCE_GROUP: 'redteaming-demo-rg-swe-mkurahara'          # 🔧 変更必要: あなたのResource Group名
  
  # その他の設定
  PYTHON_VERSION: '3.11'                                           # Chainlitとの互換性のため3.11を使用

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        cd backend
        # Add test commands here when tests are available
        # python -m pytest tests/

    - name: Package backend (zip)
      run: |
        # 軽量なパッケージを作成
        echo "Creating optimized backend package..."
        mkdir -p deploy-package
        
        # 必要なファイルのみコピー
        cp -r backend/src deploy-package/
        cp backend/requirements.txt deploy-package/
        cp backend/Dockerfile deploy-package/ 2>/dev/null || true
        
        # スタートアップスクリプトを作成
        cat > deploy-package/startup.sh << 'EOF'
        #!/bin/bash
        echo "Starting backend application..."
        cd /home/site/wwwroot
        if [ -f requirements.txt ]; then
          echo "Installing requirements..."
          pip install -r requirements.txt --no-cache-dir
        fi
        echo "Launching gunicorn..."
        gunicorn --bind 0.0.0.0:${PORT:-8000} src.main:app -k uvicorn.workers.UvicornWorker --timeout 120
        EOF
        chmod +x deploy-package/startup.sh
        
        cd deploy-package
        zip -r ../backend-package.zip . \
          -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "*.pyd" \
          ".env" "*.pytest_cache*" "*.DS_Store" "*.log" "*.tmp"
        cd ..
        rm -rf deploy-package
        
        echo "Package created successfully"
        ls -lh backend-package.zip
        PACKAGE_SIZE=$(stat -c%s backend-package.zip)
        echo "Package size in bytes: $PACKAGE_SIZE"
        if [[ $PACKAGE_SIZE -gt 524288000 ]]; then
          echo "WARNING: Package size exceeds 500MB, deployment may timeout"
        fi

    - name: Package frontend (zip)
      run: |
        # App Serviceのビルドシステムが期待する構造でパッケージング
        mkdir -p deploy-package/frontend
        cp -r frontend/* deploy-package/frontend/
        cp frontend/requirements.txt deploy-package/
        cd deploy-package
        zip -r ../frontend-package.zip . \
          -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "*.pyd" \
          ".env" "*.pytest_cache*" "*.DS_Store"
        cd ..
        rm -rf deploy-package
        ls -lh frontend-package.zip

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-app
        path: backend-package.zip

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-app
        path: frontend-package.zip

  # インフラストラクチャのデプロイは既存リソースを使用するためスキップ
  # deploy-infrastructure:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-test
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #
  #   - name: Setup Azure CLI
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: latest
  #
  #   - name: Install Azure Developer CLI
  #     run: |
  #       curl -fsSL https://aka.ms/install-azd.sh | bash
  #
  #   - name: Deploy infrastructure with azd
  #     run: |
  #       azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}
  #       azd env new production --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location "East US"
  #       azd provision --no-prompt
  #     env:
  #       AZURE_ENV_NAME: production
  #       AZURE_LOCATION: eastus
  #       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-app
        path: ./

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Pre-deployment cleanup and health check
      run: |
        echo "Checking for ongoing deployments..."
        # デプロイメントステータスを確認（最新のデプロイメント情報を取得）
        LATEST_DEPLOYMENT=$(az webapp log deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[0].{status:status, id:id}" -o json 2>/dev/null || echo "{}")
        
        if [ ! -z "$LATEST_DEPLOYMENT" ] && [ "$LATEST_DEPLOYMENT" != "{}" ]; then
          STATUS=$(echo $LATEST_DEPLOYMENT | jq -r '.status // "Unknown"' 2>/dev/null || echo "Unknown")
          echo "Latest deployment status: $STATUS"
          
          if [[ "$STATUS" == "Building" || "$STATUS" == "InProgress" || "$STATUS" == "Deploying" ]]; then
            echo "Found ongoing deployment, waiting..."
            sleep 60
          fi
        else
          echo "No deployment history found or unable to check status"
        fi
        
        echo "Stopping the app service to ensure clean state..."
        az webapp stop \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 10

    - name: Backend Deploy (config-zip with retry)
      run: |
        set -euo pipefail
        
        # Start the app service
        echo "Starting the app service..."
        az webapp start \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        sleep 15
        
        echo "Setting startup command (pre-deploy)"
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --startup-file 'startup.sh'

        echo "Configure app settings (enable build)"
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false WEBSITE_RUN_FROM_PACKAGE=1 PYTHONPATH=/home/site/wwwroot

        echo "Deploying via az webapp deployment source config-zip"
        ZIP=backend-package.zip
        MAX=3
        DELAY=30
        for i in $(seq 1 $MAX); do
          echo "Deploy attempt $i/$MAX using config-zip";
          if timeout 600 az webapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
            --src "$ZIP"; then
              echo "Deploy succeeded"; SUCCESS=1; break; fi
          echo "Deploy failed. Sleeping $DELAY s"; sleep $DELAY; DELAY=$((DELAY+30));
        done
        if [ "${SUCCESS:-0}" != "1" ]; then
          echo "All deploy attempts failed" >&2; exit 1; fi

        echo "Syncing and waiting for app to initialize"
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

        echo "Waiting for app startup (30s)"
        sleep 30

        echo "Show recent deployment status"
        az webapp log deployment list \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query '[0]' 2>/dev/null || echo "No deployment history available"

    - name: Verify Backend Deployment
      run: |
        echo "Checking deployment logs..."
        az webapp log deployment show \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --deployment-id latest 2>/dev/null || echo "No deployment logs available"

        echo "Checking app health..."
        sleep 10
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net"
        HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
        echo "HTTP response code: $HTTP_CODE"
        if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "404" ]; then
          echo "Health check failed with code: $HTTP_CODE"
        else
          echo "App is responding (HTTP $HTTP_CODE)"
        fi

        echo "Showing recent logs (last 50 lines)..."
        az webapp log tail \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --lines 50 2>/dev/null || echo "Unable to fetch application logs"

    - name: Set Backend Environment Variables
      run: |
        echo "Setting all environment variables before deployment..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            PORT=8000 \
            PYTHONPATH=/home/site/wwwroot \
            PYTHONUNBUFFERED=1 \
            ENVIRONMENT=production \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITE_HTTPLOGGING_RETENTION_DAYS=1 \
            WEBSITE_TIME_ZONE="UTC"
        
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-backend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-app
        path: ./

    - name: Unzip frontend artifact
      run: |
        rm -rf frontend || true
        unzip -q frontend-package.zip -d frontend
        ls -R1 frontend | head -50

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(az webapp show --name ${{ env.AZURE_WEBAPP_BACKEND_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query defaultHostName -o tsv)
        echo "BACKEND_URL=https://$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy to Azure App Service (Frontend)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_FRONTEND_NAME }}
        package: frontend-package.zip
        clean: true
        startup-command: 'cd frontend && chainlit run app.py --host 0.0.0.0 --port ${PORT:-8000}'

    - name: Retry on Conflict (Frontend)
      if: failure()
      run: |
        echo "Initial frontend deploy failed, attempting serialized retry (possible 409)." 
        for i in 1 2 3; do
          echo "Retry attempt $i";
          az webapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
            --src frontend-package.zip && break || sleep 10;
        done

    - name: Set Frontend Environment Variables
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            BACKEND_API_URL="${{ steps.backend-url.outputs.BACKEND_URL }}" \
            PORT=8000 \
            PYTHONPATH=/home/site/wwwroot/frontend \
            PYTHONUNBUFFERED=1 \
            WEBSITE_PYTHON_VERSION=3.11 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_FRONTEND_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "PYTHON|3.11" \
          --web-sockets-enabled true
